<resources>
    <string name="app_name">Steveee</string>
    <string name="code">"package com.example.steveee

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.horizontalScroll
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.CornerSize
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.RectangleShape
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.steveee.ui.theme.SteveeeTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            SteveeeTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    CreateBizCard()
                }

            }
        }
    }
}

@Composable
fun CreateBizCard() {  // modifier allows to modify things

    val buttonClickState = remember {  // we have a variable to remember if our button is clicked or not in starting it is false as it is not clicked
        mutableStateOf(false)
    }

    val button2ClickState = remember {  // we have a variable to remember if our button is clicked or not in starting it is false as it is not clicked
        mutableStateOf(false)
    }


    Surface(modifier = Modifier.fillMaxWidth().fillMaxHeight(), // adding our first background layer // fillMaxWidth give the width of parent
        color = Color.White
    ) {
        Card (  // second rounded background layer
            modifier = Modifier
                .width(200.dp)          // or fillMaxWidth()
                .height(390.dp)         // or fillMaxHeight()
                .padding(12.dp),
            shape = RoundedCornerShape(corner = CornerSize(15.dp)),
            colors = CardDefaults.cardColors(containerColor = Color.White), // For background color
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp) // For elevation
        ){
            Column(modifier = Modifier.fillMaxHeight(),  // this will be the height of our invisible column the height will not be more than this
                verticalArrangement = Arrangement.Top,
                horizontalAlignment = Alignment.CenterHorizontally)
            {
                Surface(                  // profile picture circle
                    modifier = Modifier
                        .size(150.dp)
                        .padding(5.dp)
                        .align(alignment = Alignment.CenterHorizontally),
                    shape = CircleShape,
                    shadowElevation = 4.dp,
                    border = BorderStroke(2.dp, Color.Gray),
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.img),
                        contentDescription = "profile image",
//                    modifier = Modifier.size(150.dp)  to resize image
                    )
                }

//                Text(
//                    text = "Steve",
//                    modifier = Modifier.align(alignment = Alignment.CenterHorizontally).padding(bottom = 10.dp),
//                    fontSize = 40.sp,  //  sp = scalable pixel
//                )

                HorizontalDivider(modifier = Modifier, thickness = 2.dp)

                Column(modifier = Modifier.padding(5.dp)) {  // column of info name, twitter handel..

                    Text(
                        text = "Steveee",
                        style = MaterialTheme.typography.headlineLarge,
                        color = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.align(alignment = Alignment.CenterHorizontally)
                    )
                    Text(
                        text = "infinite world survivor",
                        style = MaterialTheme.typography.headlineSmall,
                        color = Color.Gray,
                        modifier = Modifier.align(alignment = Alignment.CenterHorizontally)
                    )
                    Text(
                        text = "@steve_twitter",
                        style = MaterialTheme.typography.headlineSmall,
                        color = Color.Gray,
                        modifier = Modifier.align(alignment = Alignment.CenterHorizontally)
                    )
                }

                Button( onClick = {
//                    Log.d("Clicked","CreateBizCard: Clicked!!!")  // d means debug // it is only to check if button is working or not by going in logcat
                    buttonClickState.value = !buttonClickState.value  // if button is already clicked then unclick and vice versa
                },
                    modifier = Modifier.width(120.dp).height(40.dp) // Adjust button size as needed
                ) {
                    Text(text = "Inventory",     // this is rowScope of button
                        fontSize = 15.sp
                    )
                }

                if(buttonClickState.value) { // if button is clicked then show Content
                    Content()
                }else{

                    Spacer(modifier = Modifier.height(30.dp)) // Add space between the buttons

                    Button( onClick = {
//                    Log.d("Clicked","CreateBizCard: Clicked!!!")  // d means debug // it is only to check if button is working or not by going in logcat
                        button2ClickState.value = !button2ClickState.value  // if button is already clicked then unclick and vice versa
                    },
                        modifier = Modifier.width(120.dp).height(40.dp) // Adjust button size as needed
                    ) {
                        Text(text = "Code",     // this is rowScope of button
                            fontSize = 15.sp
                        )
                    }

                }

                if(button2ClickState.value) {
                    Code()
                }
            }
        }
    }
}


data class InventoryItem(val name: String, val imageRes: Int)


//@Preview(showBackground = true)  // to preview Content() function
@Composable
fun Content() {    // after clicking button
    Box(
        modifier = Modifier.fillMaxHeight().fillMaxWidth().padding(5.dp).background(color = Color.White)

    ) {
        Surface(
            modifier = Modifier.padding(3.dp).fillMaxHeight().fillMaxWidth(),
            shape = RoundedCornerShape(corner = CornerSize(6.dp)),
            border = BorderStroke(2.dp, color = Color.Gray)
        ) {

            // we created a datatype to store list of item names and their image resource

//            Inventory(data = listOf("Crafting table","Iron","Torch","Cobble Stone","Wheat","Flint")) // another function to show list of items

            val inventoryItems = listOf(
                InventoryItem("Grass block", R.drawable.grass_block),
                InventoryItem("Pickaxe", R.drawable.pickaxe),
                InventoryItem("Diamond", R.drawable.diamond),
                InventoryItem("Crafting table", R.drawable.crafting_table),
                InventoryItem("Sword", R.drawable.sword),
                InventoryItem("Wheat", R.drawable.wheat),
                InventoryItem("Water Bucket", R.drawable.bucket),
                InventoryItem("seeds", R.drawable.img_3),
                // Add more items here
            )

            Inventory(data = inventoryItems)
        }
    }
}

@Composable
fun Inventory(data : List{InventoryItem}) {  #NOTE : smaller than and greater than sign were used in List{InventoryItem} instead of {}
    LazyColumn(modifier = Modifier.background(color = Color.White)) {
        items(data) {
//            item ->  Text(item)    // to just simply view list of items

                item -> Card(
            modifier = Modifier.padding(13.dp).fillMaxWidth().height(100.dp),  // card for every inventory item
            shape = RectangleShape,
            colors = CardDefaults.cardColors(containerColor = Color.White),
        ) {
            Row(
                modifier = Modifier.padding(8.dp).background(color = Color.White).fillMaxWidth().fillMaxHeight(),
                verticalAlignment = Alignment.CenterVertically // Aligns all children in the Row vertically
            ) {
                Surface(
                    modifier = Modifier
                        .size(60.dp) // Adjust size for the image container
                        .padding(4.dp),
                    shape = RectangleShape,
                    color = Color.White
                ) {
                    Image(
                        painter = painterResource(id = item.imageRes),
                        contentDescription = item.name,
                        modifier = Modifier.fillMaxSize() // Fill the Surface container
                    )
                }

                Spacer(modifier = Modifier.width(30.dp)) // Add space between image and text

                Text(text = item.name,
                    modifier = Modifier.align(Alignment.CenterVertically),
                    fontSize = 30.sp
                )
            }

        }
            HorizontalDivider(modifier = Modifier, thickness = 2.dp)
        }
    }
}

@Composable
fun Code() {
    Box ( modifier = Modifier
        .verticalScroll(rememberScrollState()) // Enables vertical scrolling
        .horizontalScroll(rememberScrollState()) // Enables horizontal scrolling
        .fillMaxWidth() // Set the size of the scrollable area
        .fillMaxHeight()
        .background(Color.LightGray) // Optional background color for visibility
    ){
        Text(stringResource(R.string.code))
    }
}


@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    SteveeeTheme {
        CreateBizCard()
    }
}"</string>
</resources>